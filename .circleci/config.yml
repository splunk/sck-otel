version: 2.1

workflows:
  version: 2.1
  build_test:
    jobs:
      - build_test_sck_otel_docker:
          filters:
            branches:
              ignore:
                - /^release\/.*/
                - main
      - build_test_sck_otel_crio:
          filters:
            branches:
              ignore:
                - /^release\/.*/
                - main
      - build_test_sck_otel_containerd:
          filters:
            branches:
              ignore:
                - /^release\/.*/
                - main
jobs:
  build_test_sck_otel_docker:
    resource_class: large
    machine:
      image: ubuntu-2004:202101-01
    executor:
      name: integration_tests
    steps:
      - build_and_test:
          container_runtime: docker
  build_test_sck_otel_crio:
    resource_class: large
    machine:
      image: ubuntu-2004:202101-01
    executor:
      name: integration_tests
    steps:
      - build_and_test:
          container_runtime: cri-o
  build_test_sck_otel_containerd:
    resource_class: large
    machine:
      image: ubuntu-2004:202101-01
    executor:
      name: integration_tests
    steps:
      - build_and_test:
          container_runtime: containerd

commands:
  build_and_test:
    description: "Run integration tests"
    parameters:
      container_runtime:
        description: "The target containerRunTime"
        default: docker
        type: string
    steps:
      - checkout
      - when:
          condition:
            equal: [ "cri-o", << parameters.container_runtime >> ]
          steps:
            - run:
                name: Install crio
                command: |
                  # install keys
                  echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /" | sudo tee -a /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
                  echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.19/xUbuntu_20.04/ /" | sudo tee -a /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:1.19.list
                  sudo curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:1.19/xUbuntu_20.04/Release.key | sudo apt-key add -
                  sudo curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key | sudo apt-key add -
                  # install libseccomp2 and cri-o
                  sudo apt-get update
                  sudo apt-get install -y libseccomp2 || sudo apt-get update -y libseccomp2
                  sudo apt-get install -y cri-o cri-o-runc
                  sudo systemctl daemon-reload
                  sudo systemctl enable crio
                  sudo systemctl start crio
                  curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/$CRICTL_VERSION/crictl-$CRICTL_VERSION-linux-amd64.tar.gz --output crictl-$CRICTL_VERSION-linux-amd64.tar.gz
                  sudo tar zxvf crictl-$CRICTL_VERSION-linux-amd64.tar.gz -C /usr/local/bin
                  rm -f crictl-$CRICTL_VERSION-linux-amd64.tar.gz
      - run:
          name: Install and Start minikube
          command: |
            # Install Kubectl
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
            # Install Minikube
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/${MINIKUBE_VERSION}/minikube-linux-amd64
            chmod +x minikube
            sudo mv minikube /usr/local/bin/
            sudo sysctl fs.protected_regular=0
            # Start Minikube and Wait
            minikube start --driver=docker --container-runtime=<< parameters.container_runtime >> --cpus 2 --memory 4098 --kubernetes-version=${KUBERNETES_VERSION} --no-vtx-check
            kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml
            export JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: Install Splunk
          command: |
            # Install Splunk on minikube
            kubectl apply -f .circleci/k8s-splunk.yml
            # Wait until splunk is ready
            until kubectl logs splunk --tail=2 | grep -q 'Ansible playbook complete'; do
              sleep 1;
            done
            export CI_SPLUNK_HOST=$(kubectl get pod splunk --template={{.status.podIP}})
            # Setup Indexes
            curl -k -u $CI_SPLUNK_USERNAME:$CI_SPLUNK_PASSWORD https://$CI_SPLUNK_HOST:$CI_SPLUNK_PORT/services/data/indexes -d name=$CI_INDEX_EVENTS -d datatype=event
            curl -k -u $CI_SPLUNK_USERNAME:$CI_SPLUNK_PASSWORD https://$CI_SPLUNK_HOST:$CI_SPLUNK_PORT/services/data/indexes -d name=ns-anno -d datatype=event
            curl -k -u $CI_SPLUNK_USERNAME:$CI_SPLUNK_PASSWORD https://$CI_SPLUNK_HOST:$CI_SPLUNK_PORT/services/data/indexes -d name=pod-anno -d datatype=event
            # Enable HEC services
            curl -X POST -u $CI_SPLUNK_USERNAME:$CI_SPLUNK_PASSWORD -k https://$CI_SPLUNK_HOST:$CI_SPLUNK_PORT/servicesNS/nobody/splunk_httpinput/data/inputs/http/http/enable
            # Create new HEC token
            curl -X POST -u $CI_SPLUNK_USERNAME:$CI_SPLUNK_PASSWORD -k -d "name=splunk_hec_token&token=a6b5e77f-d5f6-415a-bd43-930cecb12959&disabled=0&index=main&indexes=main,circleci_events,ns-anno,pod-anno" https://$CI_SPLUNK_HOST:$CI_SPLUNK_PORT/servicesNS/nobody/splunk_httpinput/data/inputs/http
            # Restart Splunk
            curl -k -u $CI_SPLUNK_USERNAME:$CI_SPLUNK_PASSWORD https://$CI_SPLUNK_HOST:$CI_SPLUNK_PORT/services/server/control/restart -X POST
      - run:
          name: Deploy sck otel connector
          command: |
            export CI_SPLUNK_HOST=$(kubectl get pod splunk --template={{.status.podIP}})
            export CONTAINER_RUNTIME=<< parameters.container_runtime >>
            .circleci/deploy_connector.sh
      - run:
          name: Deploy log generator
          command: |
            docker pull $CI_DATAGEN_IMAGE
            kubectl apply -f test/test_setup.yaml
            sleep 60
      - run:
          name: Run functional tests
          command: |
            export PYTHONWARNINGS="ignore:Unverified HTTPS request"
            export CI_SPLUNK_HOST=$(kubectl get pod splunk --template={{.status.podIP}})
            .circleci/run_functional_tests.sh

executors:
  integration_tests:
    machine: true
    working_directory: ~/repo
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
      GOPATH: /home/circleci/go
      KUBECONFIG: /home/circleci/.kube/config
      KUBERNETES_VERSION: v1.15.2
      MINIKUBE_HOME: /home/circleci
      MINIKUBE_VERSION: v1.20.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      SKAFFOLD_VERSION: v0.33.0
      GO111MODULE: "on"
      CI_SPLUNK_VERSION: "8.1.1"
      CI_SPLUNK_FILENAME: splunk-8.1.1-08187535c166-linux-2.6-amd64.deb
      CI_SPLUNK_PORT: 8089
      CI_SPLUNK_USERNAME: admin
      CI_SPLUNK_HEC_TOKEN: a6b5e77f-d5f6-415a-bd43-930cecb12959
      CI_SPLUNK_HEC_TOKEN_PERF: a6b5e77f-d5f6-415a-bd43-930cecb12959
      CI_SPLUNK_PASSWORD: helloworld
      CI_HEC_PROTOCOL: http
      CI_INDEX_EVENTS: circleci_events
      CRICTL_VERSION: v1.21.0

